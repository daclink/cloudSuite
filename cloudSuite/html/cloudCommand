<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of bucket.php
 *
 * @author Drew A. Clinkenbeard
 */
?>
<?php

if (file_exists(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'config.php')) {
    include_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'config.php';
}
include_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'cs' . DIRECTORY_SEPARATOR . 'cloudsuite.class.php';

include_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'aws' . DIRECTORY_SEPARATOR . 'sdk-1.5.15' . DIRECTORY_SEPARATOR . 'sdk.class.php';
$_ENV['cs']['debug'] = TRUE;

require 'Slim/Slim.php';

$app = new Slim();


$app->get('/', function() {
            echo '<META HTTP-EQUIV="Refresh" Content="10; URL=http://www.cloudsuite.info">';
            echo '<div> <a href="http://www.cloudsuite.info">Click here if you are not redirected in 10 seconds</a></div>';
        });

$app->post('/:func', function ($func) {
            switch ($func) {
                case "ec2" :
                    ec2();
                    break;
                case "s3" :
                    s3();
                    break;
                default :
                    defaulto();
                    break;
            }
        });

$app->get('/listMods/:user', function ($user) {
            listUserMods($user);
        });

$app->post('/queue/:labName', function ($labName) {
            echo queue($labName);
        });
$app->get('/modForm/', function () {
            print_r($_GET);


            echo "<pre>";
            $paramString = "";
            echo "key\t==\tvalue\n";
            foreach ($_GET as $key => $value) {
                $paramString = $paramString . $key . " ";
                echo "$key";
                if (is_array($value)) {
                    foreach ($value as $key2 => $value2) {
                        echo "\t==\t$value2\n\t";
                        $paramString = $paramString . $value2 . ",";
                    }
                } else {
                    echo "\t==\t$value\n";
                    $paramString = $paramString . $value;
                }
                $paramString = $paramString . " ";
            }
            echo "</pre>";
            echo "<pre>";
            echo "\nparamstring == $paramString\n";
            echo "</pre>";
        });

$app->get('/queue', function() {

            $s3 = Utils::getS3Instance();

            $bucket = 'cloudsuite.labs';
            $response = $s3->get_object_list($bucket);
            $ret = "";
            foreach ($response as $key => $value) {
                $ret = $ret . "<div class='queued-content'>$value </div>";
            }
            if ($ret == "") {
                $ret = "<div class='queued-content'>No Queued Labs.</div>";
            }
            echo $ret;
        });

//!!!
$app->get('/labTest/:user/:lab', function($user,$lab){
   echo "<pre>";
        
       echo"user : $user\n";
       echo"lab : $lab\n";
       readLabTest($user, $lab);
       
       
   echo "</pre>";
});
        
/* SUPER IMPORTANT */
$app->run();
/* SUPER IMPORTANT */


/*
 * helper functions defined below. 
 */

function ec2() {
    $ec2 = new AmazonEC2(array(
                'key' => 'AKIAI4HYP3G5GQ2CG7MQ',
                'secret' => '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'
            ));



    $instance_id = 'i-6f8d0812';

    $response = $ec2->start_instances($instance_id);

    var_dump($response->isOK());

    if ($response->isOK()) {
        echo $response->isOK();
        $ec2->stop_instances($instance_id);
    }
}

function queue($filename) {

    $s3 = new AmazonS3(array(
                'key' => 'AKIAI4HYP3G5GQ2CG7MQ',
                'secret' => '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'
            ));


    $bucket = 'cloudsuite.labs';
    //$filename = '1987.ajs.xml';
    // var_dump($response);

    $lab = file_get_contents($_ENV['cs']['labs_dir'] . $filename);

    $response = $s3->create_object($bucket, $filename, array('body' => $lab));

    //$response = $s3->delete_all_objects($bucket);

    if ($response->isOK()) {

        return 1;
    } else {
        return 0;
    }
}

function s3() {

    $s3 = new AmazonS3(array(
                'key' => 'AKIAI4HYP3G5GQ2CG7MQ',
                'secret' => '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'
            ));

    $bucket = 'cloudsuite.labs';

    $response = $s3->get_object_list($bucket);
    echo("<pre>");
    print_r($response);


    //if ($response->isOK()) {
    $response = $s3->get_object_list($bucket);
    //       return var_dump($response);
    $ret = "";
    foreach ($response as $key => $value) {
        echo "hi!";
        $ret = $ret . "<div class='queued-content'>$value </div>";
    }
    // print_r($ret);
    echo $ret;
    echo("</pre>");
    // }

    /*
      $filename = '1987.ajs.xml';

      var_dump($response);

      $lab = file_get_contents($_ENV['cs']['labs_dir'] . $filename);

      $response = $s3->create_object($bucket, $filename, array('body' => $lab));

      $response = $s3->delete_all_objects($bucket);

      var_dump($response->isOK());
     * 
     */
}

function listUserMods($user) {

    $s3 = Utils::getS3Instance();

    $bucket = "cs.$user.modules.data";

    if (!$s3->if_bucket_exists($bucket)) {
        echo "No bucket found";
    }

//    $response = $s3->list_objects($bucket);
    $response = $s3->list_objects($bucket, array('prefix' => 'modules/'));

    //$resArray = $response->body->to_array();

    echo "<pre>";

    echo "<div> Response body</div>";

    print_r($response);

    echo "</pre>";
}

//remove this !!!
function writeLabTest() {
    $s3 = Utils::getS3Instance();
}

function readLabTest($user,$lab) {

    $s3 = Utils::getS3Instance();
    
    $bucket = "cs.user.$user.labs";
    $bucket = strtolower($bucket);
    echo "Bucket == $bucket";
    $response = $s3->get_object($bucket, $lab);

    if (!$response->isOK()) {
        return false;
    }
    echo "<h1>Response is:</h1>";
    print_r($response);
    $xmlFile = $response->body;
    echo "<h1>xmlFile is:</h1>";
    print_r($xmlFile);
    $schema = $xmlSchema = $_ENV['cs']['schema_dir'] . 'lab.xsd';
    echo "valid? = " . Utils::validate($schema, $xmlFile, true);
    
}

function defaulto() {
    $foo = "<html>
            <head> <title>gah</title></head>
            <body>Well sir</body>
        </html>";
    print_r($foo);
}
?> 
